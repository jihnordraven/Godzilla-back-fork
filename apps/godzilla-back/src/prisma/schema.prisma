generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  username         String             @unique(map: "User.login_unique")
  email            String             @unique(map: "User.email_unique")
  hashPassword     String             @map("hash_password")
  isConfirmed      Boolean            @default(false) @map("is_confirmed")
  isBlocked        Boolean            @default(false) @map("is_blocked")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  Comment          Comment[]
  EmailConfirmCode EmailConfirmCode[]
  LikesInfoComment LikesInfoComment[]
  LikesInfoPost    LikesInfoPost[]
  Post             Post[]
  profile          Profile?
  Sessions         Sessions[]
  GoogleProfile    GoogleProfile?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model GoogleProfile {
  id          String  @id @unique @default(uuid())
  providerId  String  @unique @map("provider_id")
  username    String  @unique
  email       String  @unique
  displayName String? @map("display_name")
  provider    String
  userId      String  @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("google_profiles")
}

model EmailConfirmCode {
  id     String   @id @unique @default(uuid())
  code   String   @unique
  exp    DateTime
  userId String   @map("user_id")
  users  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isUsed Boolean  @default(false) @map("is_used")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_confirm_codes")
}

model Profile {
  userOwnerId String  @id @map("user_owner_id")
  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  birthday    String?
  city        String?
  aboutMe     String? @map("about_me")
  srcPhoto    String?
  user        User    @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Post {
  id            String          @id @default(uuid())
  text          String?
  srcContent    String          @map("src_content")
  isPublished   Boolean         @default(false) @map("is_published")
  userOwnerId   String          @map("user_owner_id")
  Comment       Comment[]
  LikesInfoPost LikesInfoPost[]
  user          User            @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Comment {
  id               String             @id @default(uuid())
  content          String
  postId           String             @map("post_id")
  userOwnerId      String             @map("user_owner_id")
  post             Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)
  LikesInfoComment LikesInfoComment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("comments")
}

model Sessions {
  id          String @id @default(uuid())
  userIP      String @map("user_ip")
  userAgent   String @unique @map("user_agent")
  expires     String
  userOwnerId String @map("user_owner_id")
  user        User   @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model LikesInfoPost {
  id          String @id @default(uuid())
  status      String
  postId      String @map("post_id")
  userOwnerId String @map("user_owner_id")
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes_info_post")
}

model LikesInfoComment {
  id          String  @id @default(uuid())
  status      String
  commentId   String  @map("comment_id")
  userOwnerId String  @map("user_owner_id")
  post        Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes_info_comment")
}
